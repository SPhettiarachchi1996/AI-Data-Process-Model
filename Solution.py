# -*- coding: utf-8 -*-
"""solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PgnMpEzOGmr1WKgn45NMy2q5whnVeOBB
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.cluster import KMeans

# %matplotlib inline

dataset = pd.read_csv("data.csv")
dataset.head()

dataset.tail()

dataset.duplicated().sum()

dataset.isnull().values.any()

dataset.isnull().sum()

dataset_c = dataset.drop(['imports','exports','country','total_fertility_rate','life_expectancy'], axis=1)

dataset_c

sns.pairplot(dataset_c[['income','gdppc','inflation','health','child_mortality']])

from sklearn.preprocessing import StandardScaler

X = StandardScaler()

X

x_m =dataset_c.iloc[:,0:5]

x_m

scaled_df = X.fit_transform(dataset_c.iloc[:,0:5])

scaled_df

kmeans = KMeans(n_clusters = 3,init ='k-means++', max_iter=167)
kmeans = kmeans.fit(scaled_df)

y_m = kmeans.fit_predict(scaled_df)

kmeans.cluster_centers_

clusters = kmeans.cluster_centers_

kmeans.labels_

cluster_dict = [] 
for c in kmeans.labels_:
  cluster_dict.append(c)

cluster_dict

dataset['cluster'] = cluster_dict

dataset[dataset['cluster']==0].head(50)

dataset[dataset['cluster']==1].head(50)

dataset[dataset['cluster']==2].head(50)

kmeans.inertia_

kmeans = KMeans(n_clusters=3)
kmeans.fit(scaled_df)
kmeans.inertia_

wss =[]

for i in range(1,11): 
  KM = KMeans(n_clusters=i)
  KM.fit(scaled_df)
  wss.append(KM.inertia_)

wss

plt.plot(range(1,11),wss,marker='*')

from sklearn.metrics import silhouette_samples, silhouette_score

labels = kmeans.predict(scaled_df)

silhouette_score(scaled_df,labels)

plt.scatter(scaled_df[y_m==0, 0], scaled_df[y_m==0, 1], s=167, c='red', label ='Cluster 1')
plt.scatter(scaled_df[y_m==1, 0], scaled_df[y_m==1, 1], s=167, c='blue', label ='Cluster 2')
plt.scatter(scaled_df[y_m==2, 0], scaled_df[y_m==2, 1], s=167, c='green', label ='Cluster 3')

plt.scatter(clusters[0][0],clusters[0][1], marker='*', s=167, color='black')
plt.scatter(clusters[1][0],clusters[1][1], marker='*', s=167, color='black')
plt.scatter(clusters[2][0],clusters[2][1], marker='*', s=167, color='black')
plt.show()

developed = dataset[dataset['cluster']==0]
developing = dataset[dataset['cluster']==1]
underdeveloping = dataset[dataset['cluster']==2]

u_c = underdeveloping['country']

print('Number of Underdeveloping Countries')
print(u_c.count())

print('Names of Underdeveloping Countries')
print(u_c)

print('The no. of vaccines a country would receive:')
print(20000000/u_c.count())

underdeveloping['population'] = underdeveloping['exports']/ underdeveloping['gdppc']

underdeveloping

Total_p = underdeveloping['population'].sum()
print(Total_p)

underdeveloping['vaccine'] = (20000000 * underdeveloping['population']/Total_p)

underdeveloping['vaccine']

underdeveloping['vaccine'].sum()

underdeveloping.head()

distribution_list = underdeveloping.drop(['imports','exports','income','gdppc','inflation','health','child_mortality','total_fertility_rate','life_expectancy','cluster','population'], axis=1)

print('No. of vaccines a country would receive')
print(distribution_list.round(0))
